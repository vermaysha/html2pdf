# Nama alur kerja yang akan ditampilkan di tab Actions di GitHub
name: Build and Test CI

# Menentukan kapan alur kerja ini akan dijalankan
on:
  # Dijalankan saat ada push ke branch 'master'
  push:
    branches: [ "master" ]
  # Dijalankan saat ada pull request yang ditujukan ke branch 'master'
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

# Mendefinisikan pekerjaan (jobs) yang akan dijalankan
jobs:
  build-and-test:
    # Nama pekerjaan yang akan ditampilkan di UI GitHub, dibuat dinamis berdasarkan matriks
    name: ${{ matrix.name }}

    # Strategi untuk menjalankan pekerjaan secara paralel di berbagai konfigurasi
    strategy:
      # Jangan batalkan pekerjaan lain jika salah satu gagal
      fail-fast: false
      matrix:
        # Mendefinisikan setiap kombinasi OS, arsitektur, dan skrip build yang akan diuji
        include:
          - name: Test on Linux (x86)
            os: ubuntu-latest
            build_script: bundle:linux
            executable_path: dist/html2pdf-linux-x86

          - name: Test on Linux (ARM64)
            os: ubuntu-24.04-arm
            build_script: bundle:linux-arm64
            executable_path: dist/html2pdf-linux-arm64

          - name: Test on Windows (x86)
            os: windows-latest
            build_script: bundle:windows
            executable_path: dist/html2pdf-windows-x86.exe

          - name: Test on macOS (x86 Intel)
            os: macos-13 # Runner berbasis Intel untuk pengujian x86
            build_script: bundle:macos
            executable_path: dist/html2pdf-macos-x86

          - name: Test on macOS (ARM64 Apple Silicon)
            os: macos-latest # Runner berbasis ARM untuk pengujian arm64
            build_script: bundle:macos-arm64
            executable_path: dist/html2pdf-macos-arm64

    # Menentukan sistem operasi untuk runner berdasarkan matriks
    runs-on: ${{ matrix.os }}

    steps:
      # Langkah 1: Mengunduh kode sumber dari repositori
      - name: Checkout repository
        uses: actions/checkout@v5

      # Langkah 2: Menyiapkan lingkungan Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      # Langkah 3: Cache untuk dependensi Bun
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Langkah 4: Cache untuk browser Puppeteer
      - name: Cache Puppeteer browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/puppeteer
          key: ${{ runner.os }}-puppeteer-${{ hashFiles('src/core/browser-manager.ts') }}
          restore-keys: |
            ${{ runner.os }}-puppeteer-

      # Langkah 5: Menginstal dependensi proyek
      - name: Install dependencies
        run: bun install --frozen-lockfile

      # Langkah 6: Menginstal browser yang dibutuhkan oleh Puppeteer
      - name: Install browser for Puppeteer
        run: bun run src/index.ts browser install

      # Langkah 7: Membangun aplikasi menggunakan skrip dari matriks
      - name: Build the application for ${{ matrix.os }}
        run: bun run ${{ matrix.build_script }}
        shell: bash

      # Langkah tambahan khusus untuk runner Linux: bangun juga versi ARM64 untuk memastikan tidak ada eror kompilasi
      - name: Cross-compile for Linux ARM64 (build only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Cross-compiling for Linux ARM64 to ensure it builds successfully..."
          bun run bundle:linux-arm64
        shell: bash

      # Langkah 8: Menjalankan tes end-to-end
      - name: Run end-to-end test
        run: |
          # Membuat file HTML sederhana untuk tes konversi
          echo "<h1>Hello, World!</h1><p>This is a test from GitHub Actions.</p>" > test.html

          # Mendapatkan path biner yang dapat dieksekusi dari matriks
          EXECUTABLE="./${{ matrix.executable_path }}"

          # Membuat biner dapat dieksekusi (khusus untuk Linux/macOS)
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x $EXECUTABLE
          fi

          # Menjalankan perintah konversi
          echo "Running conversion: $EXECUTABLE ./test.html ./output.pdf"
          $EXECUTABLE ./test.html ./output.pdf

          # Memverifikasi bahwa file PDF berhasil dibuat dan tidak kosong
          if [ -s output.pdf ]; then
            echo "✅ Test successful: output.pdf was created and is not empty."
          else
            echo "❌ Test failed: output.pdf was not created or is empty."
            exit 1
          fi
        # Menggunakan shell 'bash' agar konsisten di semua platform
        shell: bash
